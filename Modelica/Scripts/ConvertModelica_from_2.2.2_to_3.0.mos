// Convert from Modelica 2.2.2 to Modelica 3.0

clear
convertClear();


// Change references to classes that are removed from Modelica Standard Library
convertClass  ("Modelica.Blocks.Math.UnitConversions.ConvertAllUnits",
               "ObsoleteModelica3.Blocks.Math.UnitConversions.ConvertAllUnits");
convertClass  ("Modelica.Blocks.Math.TwoInputs",
               "ObsoleteModelica3.Blocks.Math.TwoInputs");
convertClass  ("Modelica.Blocks.Math.TwoOutputs",
               "ObsoleteModelica3.Blocks.Math.TwoOutputs");
convertClass  ("Modelica.Blocks.Interfaces.Adaptors.AdaptorReal",
               "ObsoleteModelica3.Blocks.Interfaces.Adaptors.AdaptorReal");
convertClass  ("Modelica.Blocks.Interfaces.Adaptors.AdaptorBoolean",
               "ObsoleteModelica3.Blocks.Interfaces.Adaptors.AdaptorBoolean");
convertClass  ("Modelica.Blocks.Interfaces.Adaptors.AdaptorInteger",
               "ObsoleteModelica3.Blocks.Interfaces.Adaptors.AdaptorInteger");


// Remove "SignalType" from all RealInput and RealOutput modifiers
convertModifiers("Modelica.Blocks.Interfaces.RealInput",{"SignalType"},fill("",0),true);
convertModifiers("Modelica.Blocks.Interfaces.RealOutput",{"SignalType"},fill("",0),true);


// Change modifiers of PartialMedium.BaseProperties to equations in the equation section,
// since the variable declarations of p,h,Xi have been changed to connectors
// (in order that a BaseProperties model is "balanced")
convertModifiers("Modelica.Media.Interfaces.PartialMedium.BaseProperties",{"p", "h" ,"Xi"}, {"equation"});


// --------- Changing from emulated to real enumerations --------------------------------------
// The enumerations in Modelica.Blocks.Types
convertClass("Modelica.Blocks.Types.Extrapolation.Temp","Modelica.Blocks.Types.Extrapolation")
convertClass("Modelica.Blocks.Types.Init.Temp","Modelica.Blocks.Types.Init")
convertClass("Modelica.Blocks.Types.InitPID.Temp","Modelica.Blocks.Types.InitPID")
convertClass("Modelica.Blocks.Types.SimpleController.Temp","Modelica.Blocks.Types.SimpleController")
convertClass("Modelica.Blocks.Types.Smoothness.Temp","Modelica.Blocks.Types.Smoothness")
convertClass("Modelica.Blocks.Types.StateSelection.Temp","Modelica.Blocks.Types.StateSelection")

// The enumerations in Modelica.Mechanics.MultiBody.Types
convertClass("Modelica.Mechanics.MultiBody.Types.RotationTypes.Temp","Modelica.Mechanics.MultiBody.Types.RotationTypes")
convertClass("Modelica.Mechanics.MultiBody.Types.GravityTypes.Temp","Modelica.Mechanics.MultiBody.Types.GravityTypes")
convertClass("Modelica.Mechanics.MultiBody.Types.Init.Temp","Modelica.Mechanics.MultiBody.Types.Init")

// The enumerations in Modelica.Mechanics.Rotational.Types
convertClass("Modelica.Mechanics.Rotational.Types.Init.Temp","Modelica.Mechanics.Rotational.Types.Init")
convertClass("Modelica.Mechanics.Rotational.Types.InitRel.Temp","Modelica.Mechanics.Rotational.Types.InitRel")

// The enumerations in Modelica.Media.Interfaces.PartialMedium.Choices
convertClass("Modelica.Media.Interfaces.PartialMedium.Choices.Init.Temp","Modelica.Media.Interfaces.PartialMedium.Choices.Init")
convertClass("Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.Temp","Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy")
convertClass("Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEntropy.Temp","Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEntropy")
convertClass("Modelica.Media.Interfaces.PartialMedium.Choices.pd.Temp","Modelica.Media.Interfaces.PartialMedium.Choices.pd")
convertClass("Modelica.Media.Interfaces.PartialMedium.Choices.Th.Temp","Modelica.Media.Interfaces.PartialMedium.Choices.Th")
convertClass("Modelica.Media.Interfaces.PartialMedium.Choices.Explicit.Temp","Modelica.Media.Interfaces.PartialMedium.Choices.Explicit")

// The enumerations in Modelica.Electrical.Digital.Interfaces
convertClass("Modelica.Electrical.Digital.Interfaces.LogicValue","Modelica.Electrical.Digital.Interfaces.Logic")

// The enumerations in Modelica.Utilities.Types
convertClass("Modelica.Utilities.Types.Compare.Type"  ,"Modelica.Utilities.Types.Compare")
convertClass("Modelica.Utilities.Types.FileType.Type" ,"Modelica.Utilities.Types.FileType")
convertClass("Modelica.Utilities.Types.TokenType.Type","Modelica.Utilities.Types.TokenType")

//-------- Machines ------------------------------------------------------------
// Convert Machines to 2.0.0 (MSL 3.0)
// Revisions :
// 2007/10/15: Anton Haumer
//             first version
// 2007/10/20: Anton Haumer
//             extended version

convertClass  ("Machines.Examples.Utilities", "Machines.Utilities");

convertClass  ("Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
               "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnet");
convertClass  ("Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
               "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcited");
convertClass  ("Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
               "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotor");

convertClass  ("Machines.Sensors.RotorAngle", "Machines.Sensors.RotorDisplacementAngle");
convertClass  ("Machines.Sensors.VoltageRMSsensor", "Machines.Sensors.VoltageQuasiRMSSensor");
convertClass  ("Machines.Sensors.CurrentRMSsensor", "Machines.Sensors.CurrentQuasiRMSSensor");

convertElement({"Machines.Examples.Utilities.SwitchYD"}, 
               "plug_NS", "plug_sn");
convertElement({"Machines.Examples.Utilities.SwitchYD"}, 
               "pug_PS", "plug_sp");
convertElement({"Machines.Examples.Utilities.SwitchYD"}, 
               "plug_P", "plugSupply");

convertElement({"Machines.Examples.Utilities.TerminalBox"}, 
               "StarDelta", "terminalConnection");

convertElement({"Machines.Examples.Utilities.TerminalBox"}, 
               "negativeMachinePlug", "plug_sn");
convertElement({"Machines.Examples.Utilities.TerminalBox"}, 
               "positiveMachinePlug", "plug_sp");
convertElement({"Machines.Examples.Utilities.TerminalBox"}, 
               "plugToGrid", "plugSupply");

convertElement({"Machines.Interfaces.PartialBasicInductionMachine",
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage",
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing",
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage",
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage"},
               "fNominal", "fsNominal");

convertElement({"Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing"}, 
               "VsNom", "VsNominal");
convertElement({"Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing"}, 
               "Vr_LR", "VrLockedRotor");
convertElement({"Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage"}, 
               "V0", "VsOpenCircuit");
convertElement({"Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage"}, 
               "VNominal", "VsNominal");
convertElement({"Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage"}, 
               "Ie0", "IeOpenCircuit");

convertElement({"Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage",  
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.Components.DamperCage"}, 
               "Lrsigma", "Lrsigmad");

convertElement({"Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.Components.DamperCage"}, 
               "Rr", "Rrd");

convertElement({"Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage"}, 
               "DamperCage", "useDamperCage");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited"}, 
               "J_Rotor", "Jr");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited"}, 
               "J_Stator", "Js");

convertElement({"Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing",
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited", 
                "Machines.BasicMachines.Components.ElectricalExcitation", 
                "Machines.BasicMachines.Components.PartialAirGapDC", 
                "Machines.BasicMachines.Components.AirGapDC", 
                "Machines.Interfaces.PartialBasicDCMachine"}, 
               "TurnsRatio", "turnsRatio");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited", 
                "Machines.BasicMachines.Components.PartialAirGap", 
                "Machines.BasicMachines.Components.AirGapS", 
                "Machines.BasicMachines.Components.AirGapR",
                "Machines.BasicMachines.Components.PartialAirGapDC", 
                "Machines.BasicMachines.Components.AirGapDC"}, 
               "flange_a", "shaft");

convertElement({"Machines.Sensors.RotorAngle"}, 
               "flange", "shaft");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited"}, 
               "phi_mechanical", "phiMechanical");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited"}, 
               "w_mechanical", "wMechanical");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited"}, 
               "rpm_mechanical", "rpmMechanical");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited",
                "Machines.BasicMachines.Components.PartialAirGap",
                "Machines.BasicMachines.Components.AirGapS",
                "Machines.BasicMachines.Components.AirGapR",
                "Machines.BasicMachines.Components.PartialAirGapDC",
                "Machines.BasicMachines.Components.AirGapDC"}, 
               "tau_electrical", "tauElectrical");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited"}, 
               "tau_shaft", "tauShaft");

// Conversions for Machines.Examples

convertClass  ("Machines.Examples.AIMS_start", "Machines.Examples.AIMS_Start");
convertClass  ("Machines.Examples.SMEE_Gen", "Machines.Examples.SMEE_Generator");
convertClass  ("Machines.Examples.DCPM_start", "Machines.Examples.DCPM_Start");
convertClass  ("Machines.Examples.DCEE_start", "Machines.Examples.DCEE_Start");
convertClass  ("Machines.Examples.DCSE_start", "Machines.Examples.DCSE_Start");

convertElement({"Machines.Examples.AIMC_DOL",
                "Machines.Examples.AIMC_YD",
                "Machines.Examples.AIMS_Start",
                "Machines.Examples.AIMC_Inverter",
                "Machines.Examples.SMR_Inverter",
                "Machines.Examples.SMPM_Inverter",
                "Machines.Examples.DCPM_Start",
                "Machines.Examples.DCEE_Start",
                "Machines.Examples.DCSE_Start",
                "Machines.Examples.AIMC_Steinmetz"}, 
               "T_Load", "TLoad");

convertElement({"Machines.Examples.AIMC_DOL",
                "Machines.Examples.AIMC_YD",
                "Machines.Examples.AIMS_Start",
                "Machines.Examples.AIMC_Inverter",
                "Machines.Examples.SMR_Inverter",
                "Machines.Examples.SMPM_Inverter",
                "Machines.Examples.DCPM_Start",
                "Machines.Examples.DCEE_Start",
                "Machines.Examples.DCSE_Start",
                "Machines.Examples.AIMC_Steinmetz"}, 
               "J_Load", "JLoad");

// End Convert Machines to 2.0.0 (MSL 3.0)
//-------- Machines ------------------------------------------------------------
