// Convert from Modelica 2.2.2 to Modelica 3.0

// clear
convertClear();


// Change references to classes that are removed from Modelica Standard Library
convertClass("Modelica.Icons.Enumeration",
             "ObsoleteModelica3.Icons.Enumeration")
convertClass("Modelica.Blocks.Math.UnitConversions.ConvertAllUnits",
             "ObsoleteModelica3.Blocks.Math.UnitConversions.ConvertAllUnits");
convertClass("Modelica.Blocks.Math.TwoInputs",
             "ObsoleteModelica3.Blocks.Math.TwoInputs");
convertClass("Modelica.Blocks.Math.TwoOutputs",
             "ObsoleteModelica3.Blocks.Math.TwoOutputs");
convertClass("Modelica.Blocks.Interfaces.Adaptors.AdaptorReal",
             "ObsoleteModelica3.Blocks.Interfaces.Adaptors.AdaptorReal");
convertClass("Modelica.Blocks.Interfaces.Adaptors.AdaptorBoolean",
             "ObsoleteModelica3.Blocks.Interfaces.Adaptors.AdaptorBoolean");
convertClass("Modelica.Blocks.Interfaces.Adaptors.AdaptorInteger",
             "ObsoleteModelica3.Blocks.Interfaces.Adaptors.AdaptorInteger");

convertClass("Modelica.Blocks.Types.StateSelection.Temp",
             "StateSelect")
convertClass("Modelica.Blocks.Types.StateSelection.Never",
             "StateSelect.never")
convertClass("Modelica.Blocks.Types.StateSelection.Avoid",
             "StateSelect.avoid")
convertClass("Modelica.Blocks.Types.StateSelection.Default",
             "StateSelect.default")
convertClass("Modelica.Blocks.Types.StateSelection.Prefer",
             "StateSelect.prefer")
convertClass("Modelica.Blocks.Types.StateSelection.Always",
             "StateSelect.always")

convertClass("Modelica.Mechanics.MultiBody.Types.Init",
             "ObsoleteModelica3.Mechanics.MultiBody.Types.Init")
convertClass("Modelica.Mechanics.MultiBody.Types.AngularVelocity_degs",
             "ObsoleteModelica3.Mechanics.MultiBody.Types.AngularVelocity_degs")
convertClass("Modelica.Mechanics.MultiBody.Types.AngularAcceleration_degs2",
             "ObsoleteModelica3.Mechanics.MultiBody.Types.AngularAcceleration_degs2")

convertClass("Modelica.Mechanics.Rotational.Types.Init",
             "ObsoleteModelica3.Mechanics.Rotational.Types.Init")
convertClass("Modelica.Mechanics.Rotational.Types.InitRel",
             "ObsoleteModelica3.Mechanics.Rotational.Types.InitRel")


// Remove "SignalType" from all RealInput and RealOutput modifiers
convertModifiers("Modelica.Blocks.Interfaces.RealInput",{"SignalType"},fill("",0),true);
convertModifiers("Modelica.Blocks.Interfaces.RealOutput",{"SignalType"},fill("",0),true);


// Change modifiers of PartialMedium.BaseProperties to equations in the equation section,
// since the variable declarations of p,h,Xi have been changed to connectors
// (in order that a BaseProperties model is "balanced")
convertModifiers("Modelica.Media.Interfaces.PartialMedium.BaseProperties",{"p", "h" ,"Xi"}, {"equation"});


// Rename references to classes that are moved
convertClass("Modelica.Mechanics.MultiBody.Frames.length",
             "Modelica.Math.Vectors.length")
convertClass("Modelica.Mechanics.MultiBody.Frames.normalize",
             "Modelica.Math.Vectors.normalize")

// --------- Changing from emulated to real enumerations --------------------------------------
// The enumerations in Modelica.Blocks.Types
convertClass("Modelica.Blocks.Types.Extrapolation.Temp","Modelica.Blocks.Types.Extrapolation")
convertClass("Modelica.Blocks.Types.Init.Temp","Modelica.Blocks.Types.Init")
convertClass("Modelica.Blocks.Types.InitPID.Temp","Modelica.Blocks.Types.InitPID")
convertClass("Modelica.Blocks.Types.SimpleController.Temp","Modelica.Blocks.Types.SimpleController")
convertClass("Modelica.Blocks.Types.Smoothness.Temp","Modelica.Blocks.Types.Smoothness")
convertClass("Modelica.Blocks.Types.StateSelection.Temp","Modelica.Blocks.Types.StateSelection")

// The enumerations in Modelica.Mechanics.MultiBody.Types
convertClass("Modelica.Mechanics.MultiBody.Types.RotationTypes.Temp","Modelica.Mechanics.MultiBody.Types.RotationTypes")
convertClass("Modelica.Mechanics.MultiBody.Types.GravityTypes.Temp","Modelica.Mechanics.MultiBody.Types.GravityTypes")
convertClass("Modelica.Mechanics.MultiBody.Types.Init.Temp","Modelica.Mechanics.MultiBody.Types.Init")

// The enumerations in Modelica.Media.Interfaces.PartialMedium.Choices
convertClass("Modelica.Media.Interfaces.PartialMedium.Choices.Init.Temp","Modelica.Media.Interfaces.PartialMedium.Choices.Init")
convertClass("Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.Temp","Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy")
convertClass("Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEntropy.Temp","Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEntropy")
convertClass("Modelica.Media.Interfaces.PartialMedium.Choices.pd.Temp","Modelica.Media.Interfaces.PartialMedium.Choices.pd")
convertClass("Modelica.Media.Interfaces.PartialMedium.Choices.Th.Temp","Modelica.Media.Interfaces.PartialMedium.Choices.Th")
convertClass("Modelica.Media.Interfaces.PartialMedium.Choices.Explicit.Temp","Modelica.Media.Interfaces.PartialMedium.Choices.Explicit")

// The enumerations in Modelica.Electrical.Digital.Interfaces
convertClass("Modelica.Electrical.Digital.Interfaces.LogicValue","Modelica.Electrical.Digital.Interfaces.Logic")

// The enumerations in Modelica.Utilities.Types
convertClass("Modelica.Utilities.Types.Compare.Type"  ,"Modelica.Utilities.Types.Compare")
convertClass("Modelica.Utilities.Types.FileType.Type" ,"Modelica.Utilities.Types.FileType")
convertClass("Modelica.Utilities.Types.TokenType.Type","Modelica.Utilities.Types.TokenType")


// --------- Changing from non-SI to SI units to allow stricter unit checking -------------------------
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyBox"     ,{"density"}, {"density=%density%*1000"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyCylinder",{"density"}, {"density=%density%*1000"});



// --------- initialization of 1-dim. rotational systems with start values ------------------------------

// Modelica.Mechanics.Rotational.Inertia
convertElement  ("Modelica.Mechanics.Rotational.Inertia", "stateSelection", "stateSelect");
convertModifiers("Modelica.Mechanics.Rotational.Inertia",{"phi_start"}, {"phi.start=%phi_start%"});
convertModifiers("Modelica.Mechanics.Rotational.Inertia",{"w_start"}  , {"w.start=%w_start%"});
convertModifiers("Modelica.Mechanics.Rotational.Inertia",{"a_start"}  , {"a.start=%a_start%"});
convertModifiers("Modelica.Mechanics.Rotational.Inertia",{"initType"} , 
                 {"phi.fixed=if (%initType%==3 or "+
                                "%initType%==4 or "+
                                "%initType%==7 or "+
                                "%initType%==9) then true else false",
                  "w.fixed=if (%initType%==2 or "+
                              "%initType%==3 or "+
                              "%initType%==5 or "+
                              "%initType%==8 or "+
                              "%initType%==9) then true else false",
                  "a.fixed=if (%initType%==2 or "+
                              "%initType%==6 or "+
                              "%initType%==7 or "+
                              "%initType%==8 or "+
                              "%initType%==9) then true else false"}, true);

// Modelica.Mechanics.Rotational.SpringDamper
convertElement  ("Modelica.Mechanics.Rotational.SpringDamper", "stateSelection", "stateSelect");
convertModifiers("Modelica.Mechanics.Rotational.SpringDamper",{"phi_rel_start"}, {"phi_rel.start=%phi_rel_start%"});
convertModifiers("Modelica.Mechanics.Rotational.SpringDamper",{"w_rel_start"}  , {"w_rel.start=%w_rel_start%"});
convertModifiers("Modelica.Mechanics.Rotational.SpringDamper",{"initType"} , 
                 {"phi_rel.fixed=if (%initType%==3 or "+
                                    "%initType%==4) then true else false",
                  "w_rel.fixed=if (%initType%==2 or "+
                                  "%initType%==3 or "+
                                  "%initType%==5) then true else false",
                  "a_rel.fixed=if (%initType%==2) then true else false"}, true);

// Modelica.Mechanics.Rotational.InitializeFlange
convertElement("Modelica.Mechanics.Rotational.InitializeFlange", "stateSelection", "stateSelect");


// Modelica.Mechanics.MultiBody.Parts.Rotor1D
convertModifiers("Modelica.Mechanics.MultiBody.Parts.Rotor1D",{"phi_start"}, {"phi.start=%phi_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.Rotor1D",{"w_start"}  , {"w.start=%w_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.Rotor1D",{"a_start"}  , {"a.start=%a_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.Rotor1D",{"initType"} , 
                 {"phi.fixed=if (%initType%==2 or "+
                                "%initType%==4 or "+
                                "%initType%==7) then true else false",
                  "w.fixed=if (%initType%==2 or "+
                              "%initType%==3 or "+
                              "%initType%==5 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false",
                  "a.fixed=if (%initType%==3 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false"}, true);
convertModifiers("Modelica.Mechanics.MultiBody.Parts.Rotor1D",{"enforceStates"}, 
                {"stateSelect=if (%enforceStates%) then StateSelect.prefer else StateSelect.default"}, true);



// --------- initialization of 3-dim. rotational systems with start values ------------------------------

// Modelica.Mechanics.MultiBody.Joints.Internal.Revolute
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Internal.Revolute",{"phi_offset"}, {"phi_offset=%phi_offset%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Internal.Revolute",{"phi_start"}, {"phi.start=%phi_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Internal.Revolute",{"w_start"}  , {"w.start=%w_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Internal.Revolute",{"a_start"}  , {"a.start=%a_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Internal.Revolute",{"initType"} , 
                 {"phi.fixed=if (%initType%==2 or "+
                                "%initType%==4 or "+
                                "%initType%==7) then true else false",
                  "w.fixed=if (%initType%==2 or "+
                              "%initType%==3 or "+
                              "%initType%==5 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false",
                  "a.fixed=if (%initType%==3 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false"}, true);
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Internal.Revolute",{"enforceStates"}, 
                {"stateSelect=if (%enforceStates%) then StateSelect.always else StateSelect.prefer"}, true);

// Modelica.Mechanics.MultiBody.Joints.Revolute
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Revolute",{"phi_offset"}, {"phi_offset=%phi_offset%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Revolute",{"phi_start"}, {"phi.start=%phi_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Revolute",{"w_start"}  , {"w.start=%w_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Revolute",{"a_start"}  , {"a.start=%a_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Revolute",{"initType"} , 
                 {"phi.fixed=if (%initType%==2 or "+
                                "%initType%==4 or "+
                                "%initType%==7) then true else false",
                  "w.fixed=if (%initType%==2 or "+
                              "%initType%==3 or "+
                              "%initType%==5 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false",
                  "a.fixed=if (%initType%==3 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false"}, true);
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Revolute",{"enforceStates"}, 
                {"stateSelect=if (%enforceStates%) then StateSelect.always else StateSelect.prefer"}, true);

// Modelica.Mechanics.MultiBody.Joints.ActuatedRevolute
convertModifiers("Modelica.Mechanics.MultiBody.Joints.ActuatedRevolute",{"phi_offset"}, {"phi_offset=%phi_offset%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.ActuatedRevolute",{"phi_start"}, {"phi.start=%phi_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.ActuatedRevolute",{"w_start"}  , {"w.start=%w_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.ActuatedRevolute",{"a_start"}  , {"a.start=%a_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.ActuatedRevolute",{"initType"} , 
                 {"phi.fixed=if (%initType%==2 or "+
                                "%initType%==4 or "+
                                "%initType%==7) then true else false",
                  "w.fixed=if (%initType%==2 or "+
                              "%initType%==3 or "+
                              "%initType%==5 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false",
                  "a.fixed=if (%initType%==3 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false"}, true);
convertModifiers("Modelica.Mechanics.MultiBody.Joints.ActuatedRevolute",{"enforceStates"}, 
                {"stateSelect=if (%enforceStates%) then StateSelect.always else StateSelect.prefer"}, true);

// Modelica.Mechanics.MultiBody.Joints.Internal.Prismatic
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Internal.Prismatic",{"s_offset"} , {"s_offset=%s_offset%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Internal.Prismatic",{"s_start"}  , {"s.start=%s_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Internal.Prismatic",{"v_start"}  , {"v.start=%v_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Internal.Prismatic",{"a_start"}  , {"a.start=%a_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Internal.Prismatic",{"initType"} , 
                 {"s.fixed=if (%initType%==2 or "+
                              "%initType%==4 or "+
                              "%initType%==7) then true else false",
                  "v.fixed=if (%initType%==2 or "+
                              "%initType%==3 or "+
                              "%initType%==5 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false",
                  "a.fixed=if (%initType%==3 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false"}, true);
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Internal.Prismatic",{"enforceStates"}, 
                {"stateSelect=if (%enforceStates%) then StateSelect.always else StateSelect.prefer"}, true);

// Modelica.Mechanics.MultiBody.Joints.Prismatic
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Prismatic",{"s_offset"} , {"s_offset=%s_offset%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Prismatic",{"s_start"}  , {"s.start=%s_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Prismatic",{"v_start"}  , {"v.start=%v_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Prismatic",{"a_start"}  , {"a.start=%a_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Prismatic",{"initType"} , 
                 {"s.fixed=if (%initType%==2 or "+
                              "%initType%==4 or "+
                              "%initType%==7) then true else false",
                  "v.fixed=if (%initType%==2 or "+
                              "%initType%==3 or "+
                              "%initType%==5 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false",
                  "a.fixed=if (%initType%==3 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false"}, true);
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Prismatic",{"enforceStates"}, 
                {"stateSelect=if (%enforceStates%) then StateSelect.always else StateSelect.prefer"}, true);


// Modelica.Mechanics.MultiBody.Joints.ActuatedPrismatic
convertModifiers("Modelica.Mechanics.MultiBody.Joints.ActuatedPrismatic",{"s_offset"} , {"s_offset=%s_offset%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.ActuatedPrismatic",{"s_start"}  , {"s.start=%s_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.ActuatedPrismatic",{"v_start"}  , {"v.start=%v_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.ActuatedPrismatic",{"a_start"}  , {"a.start=%a_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.ActuatedPrismatic",{"initType"} , 
                 {"s.fixed=if (%initType%==2 or "+
                              "%initType%==4 or "+
                              "%initType%==7) then true else false",
                  "v.fixed=if (%initType%==2 or "+
                              "%initType%==3 or "+
                              "%initType%==5 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false",
                  "a.fixed=if (%initType%==3 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false"}, true);
convertModifiers("Modelica.Mechanics.MultiBody.Joints.ActuatedPrismatic",{"enforceStates"}, 
                {"stateSelect=if (%enforceStates%) then StateSelect.always else StateSelect.prefer"}, true);

// Modelica.Mechanics.MultiBody.Joints.Cylindrical
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Cylindrical",{"s_start"}  , {"s.start=%s_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Cylindrical",{"v_start"}  , {"v.start=%v_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Cylindrical",{"a_start"}  , {"a.start=%a_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Cylindrical",{"phi_start"}, {"phi.start=%phi_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Cylindrical",{"w_start"}  , {"w.start=%w_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Cylindrical",{"wd_start"} , {"wd.start=%wd_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Cylindrical",{"initType"} , 
                 {"s.fixed=if (%initType%==2 or "+
                              "%initType%==4 or "+
                              "%initType%==7) then true else false",
                  "v.fixed=if (%initType%==2 or "+
                              "%initType%==3 or "+
                              "%initType%==5 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false",
                  "a.fixed=if (%initType%==3 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false",
                  "phi.fixed=if (%initType%==2 or "+
                                "%initType%==4 or "+
                                "%initType%==7) then true else false",
                  "w.fixed=if (%initType%==2 or "+
                              "%initType%==3 or "+
                              "%initType%==5 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false",
                  "wd.fixed=if (%initType%==3 or "+
                               "%initType%==6 or "+
                               "%initType%==7) then true else false"}, true);
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Cylindrical",{"enforceStates"}, 
                {"stateSelect=if (%enforceStates%) then StateSelect.always else StateSelect.prefer"}, true);


// Modelica.Mechanics.MultiBody.Joints.Universal
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Universal",{"phi_start_a"}, {"phi_a.start=%phi_start_a%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Universal",{"w_start_a"}  , {"w_a.start=%w_start_a%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Universal",{"a_start_a"}  , {"a_a.start=%a_start_a%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Universal",{"phi_start_b"}, {"phi_b.start=%phi_start_b%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Universal",{"w_start_b"}  , {"w_b.start=%w_start_b%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Universal",{"a_start_b"}  , {"a_b.start=%a_start_b%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Universal",{"initType"} , 
                 {"phi_a.fixed=if (%initType%==2 or "+
                                  "%initType%==4 or "+
                                  "%initType%==7) then true else false",
                  "w_a.fixed=if (%initType%==2 or "+
                                "%initType%==3 or "+
                                "%initType%==5 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "a_a.fixed=if (%initType%==3 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "phi_b.fixed=if (%initType%==2 or "+
                                  "%initType%==4 or "+
                                  "%initType%==7) then true else false",
                  "w_b.fixed=if (%initType%==2 or "+
                                "%initType%==3 or "+
                                "%initType%==5 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "a_b.fixed=if (%initType%==3 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false"}, true);
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Universal",{"enforceStates"}, 
                {"stateSelect=if (%enforceStates%) then StateSelect.always else StateSelect.prefer"}, true);

// Modelica.Mechanics.MultiBody.Joints.Planar
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Planar",{"s_start_x"}, {"s_x.start=%s_start_x%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Planar",{"v_start_x"}, {"v_x.start=%v_start_x%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Planar",{"a_start_x"}, {"a_x.start=%a_start_x%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Planar",{"s_start_y"}, {"s_y.start=%s_start_y%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Planar",{"v_start_y"}, {"v_y.start=%v_start_y%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Planar",{"a_start_y"}, {"a_y.start=%a_start_y%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Planar",{"phi_start"}, {"phi.start=%phi_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Planar",{"w_start"}  , {"w.start=%w_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Planar",{"wd_start"} , {"wd.start=%wd_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Planar",{"initType"} , 
                 {"s_x.fixed=if (%initType%==2 or "+
                                "%initType%==4 or "+
                                "%initType%==7) then true else false",
                  "v_x.fixed=if (%initType%==2 or "+
                                "%initType%==3 or "+
                                "%initType%==5 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "a_x.fixed=if (%initType%==3 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "s_y.fixed=if (%initType%==2 or "+
                                "%initType%==4 or "+
                                "%initType%==7) then true else false",
                  "v_y.fixed=if (%initType%==2 or "+
                                "%initType%==3 or "+
                                "%initType%==5 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "a_y.fixed=if (%initType%==3 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "phi.fixed=if (%initType%==2 or "+
                                "%initType%==4 or "+
                                "%initType%==7) then true else false",
                  "w.fixed=if (%initType%==2 or "+
                              "%initType%==3 or "+
                              "%initType%==5 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false",
                  "wd.fixed=if (%initType%==3 or "+
                              "%initType%==6 or "+
                              "%initType%==7) then true else false"}, true);
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Planar",{"enforceStates"}, 
                {"stateSelect=if (%enforceStates%) then StateSelect.always else StateSelect.prefer"}, true);


// Modelica.Mechanics.MultiBody.Joints.Spherical
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Spherical",{"angles_start"} , {"angles_start=%angles_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Spherical",{"w_rel_a_start"}, {"w_rel_a_start=%w_rel_a_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Spherical",{"z_rel_a_start"}, {"z_rel_a_start=%z_rel_a_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.Spherical",{"initType"} , 
                 {"angles_fixed=if (%initType%==2 or "+
                                   "%initType%==4 or "+
                                   "%initType%==7) then true else false",
                  "w_rel_a_fixed=if (%initType%==2 or "+
                                    "%initType%==3 or "+
                                    "%initType%==5 or "+
                                    "%initType%==6 or "+
                                    "%initType%==7) then true else false",
                  "z_rel_a_fixed=if (%initType%==3 or "+
                                    "%initType%==6 or "+
                                    "%initType%==7) then true else false"}, true);


// Modelica.Mechanics.MultiBody.Joints.FreeMotion
convertModifiers("Modelica.Mechanics.MultiBody.Joints.FreeMotion",{"r_rel_a_start"}, {"r_rel_a.start=%r_rel_a_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.FreeMotion",{"v_rel_a_start"}, {"v_rel_a.start=%v_rel_a_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.FreeMotion",{"a_rel_a_start"}, {"a_rel_a.start=%a_rel_a_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.FreeMotion",{"angles_start"} , {"angles_start=%angles_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.FreeMotion",{"w_rel_a_start"}, {"w_rel_a_start=%w_rel_a_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.FreeMotion",{"z_rel_a_start"}, {"z_rel_a_start=%z_rel_a_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Joints.FreeMotion",{"initType"} , 
                 {"r_rel_a.fixed=if (%initType%==2 or "+
                                    "%initType%==4 or "+
                                    "%initType%==7) then true else false",
                  "v_rel_a.fixed=if (%initType%==2 or "+
                                    "%initType%==3 or "+
                                    "%initType%==5 or "+
                                    "%initType%==6 or "+
                                    "%initType%==7) then true else false",
                  "a_rel_a.fixed=if (%initType%==3 or "+
                                    "%initType%==6 or "+
                                    "%initType%==7) then true else false",
                  "angles_fixed=if (%initType%==2 or "+
                                   "%initType%==4 or "+
                                   "%initType%==7) then true else false",
                  "w_rel_a_fixed=if (%initType%==2 or "+
                                    "%initType%==3 or "+
                                    "%initType%==5 or "+
                                    "%initType%==6 or "+
                                    "%initType%==7) then true else false",
                  "z_rel_a_fixed=if (%initType%==3 or "+
                                    "%initType%==6 or "+
                                    "%initType%==7) then true else false"}, true);


// Modelica.Mechanics.MultiBody.Parts.Body
convertModifiers("Modelica.Mechanics.MultiBody.Parts.Body",{"r_0_start"}, {"r_0.start=%r_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.Body",{"v_0_start"}, {"v_0.start=%v_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.Body",{"a_0_start"}, {"a_0.start=%a_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.Body",{"angles_start"} , {"angles_start=%angles_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.Body",{"w_0_start"}, {"w_0_start=%w_0_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.Body",{"z_0_start"}, {"z_0_start=%z_0_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.Body",{"initType"} , 
                 {"r_0.fixed=if (%initType%==2 or "+
                                "%initType%==4 or "+
                                "%initType%==7) then true else false",
                  "v_0.fixed=if (%initType%==2 or "+
                                "%initType%==3 or "+
                                "%initType%==5 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "a_0.fixed=if (%initType%==3 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "angles_fixed=if (%initType%==2 or "+
                                   "%initType%==4 or "+
                                   "%initType%==7) then true else false",
                  "w_0_fixed=if (%initType%==2 or "+
                                "%initType%==3 or "+
                                "%initType%==5 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "z_0_fixed=if (%initType%==3 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false"}, true);

// Modelica.Mechanics.MultiBody.Parts.BodyShape
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyShape",{"r_0_start"}, {"r_0.start=%r_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyShape",{"v_0_start"}, {"v_0.start=%v_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyShape",{"a_0_start"}, {"a_0.start=%a_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyShape",{"angles_start"} , {"angles_start=%angles_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyShape",{"w_0_start"}, {"w_0_start=%w_0_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyShape",{"z_0_start"}, {"z_0_start=%z_0_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyShape",{"initType"} , 
                 {"r_0.fixed=if (%initType%==2 or "+
                                "%initType%==4 or "+
                                "%initType%==7) then true else false",
                  "v_0.fixed=if (%initType%==2 or "+
                                "%initType%==3 or "+
                                "%initType%==5 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "a_0.fixed=if (%initType%==3 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "angles_fixed=if (%initType%==2 or "+
                                   "%initType%==4 or "+
                                   "%initType%==7) then true else false",
                  "w_0_fixed=if (%initType%==2 or "+
                                "%initType%==3 or "+
                                "%initType%==5 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "z_0_fixed=if (%initType%==3 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false"}, true);

// Modelica.Mechanics.MultiBody.Parts.BodyBox
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyBox",{"r_0_start"}, {"r_0.start=%r_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyBox",{"v_0_start"}, {"v_0.start=%v_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyBox",{"a_0_start"}, {"a_0.start=%a_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyBox",{"angles_start"}, {"angles_start=%angles_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyBox",{"w_0_start"}, {"w_0_start=%w_0_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyBox",{"z_0_start"}, {"z_0_start=%z_0_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyBox",{"initType"} , 
                 {"r_0.fixed=if (%initType%==2 or "+
                                "%initType%==4 or "+
                                "%initType%==7) then true else false",
                  "v_0.fixed=if (%initType%==2 or "+
                                "%initType%==3 or "+
                                "%initType%==5 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "a_0.fixed=if (%initType%==3 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "angles_fixed=if (%initType%==2 or "+
                                   "%initType%==4 or "+
                                   "%initType%==7) then true else false",
                  "w_0_fixed=if (%initType%==2 or "+
                                "%initType%==3 or "+
                                "%initType%==5 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "z_0_fixed=if (%initType%==3 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false"}, true);


// Modelica.Mechanics.MultiBody.Parts.BodyCylinder
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyCylinder",{"r_0_start"}, {"r_0.start=%r_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyCylinder",{"v_0_start"}, {"v_0.start=%v_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyCylinder",{"a_0_start"}, {"a_0.start=%a_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyCylinder",{"angles_start"} , {"angles_start=%angles_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyCylinder",{"w_0_start"}, {"w_0_start=%w_0_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyCylinder",{"z_0_start"}, {"z_0_start=%z_0_start%*Modelica.Constants.D2R"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.BodyCylinder",{"initType"} , 
                 {"r_0.fixed=if (%initType%==2 or "+
                                "%initType%==4 or "+
                                "%initType%==7) then true else false",
                  "v_0.fixed=if (%initType%==2 or "+
                                "%initType%==3 or "+
                                "%initType%==5 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "a_0.fixed=if (%initType%==3 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "angles_fixed=if (%initType%==2 or "+
                                   "%initType%==4 or "+
                                   "%initType%==7) then true else false",
                  "w_0_fixed=if (%initType%==2 or "+
                                "%initType%==3 or "+
                                "%initType%==5 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "z_0_fixed=if (%initType%==3 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false"}, true);



// Modelica.Mechanics.MultiBody.Parts.PointMass
convertModifiers("Modelica.Mechanics.MultiBody.Parts.PointMass",{"r_0_start"}, {"r_0.start=%r_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.PointMass",{"v_0_start"}, {"v_0.start=%v_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.PointMass",{"a_0_start"}, {"a_0.start=%a_0_start%"});
convertModifiers("Modelica.Mechanics.MultiBody.Parts.PointMass",{"initType"} , 
                 {"r_0.fixed=if (%initType%==2 or "+
                                "%initType%==4 or "+
                                "%initType%==7) then true else false",
                  "v_0.fixed=if (%initType%==2 or "+
                                "%initType%==3 or "+
                                "%initType%==5 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false",
                  "a_0.fixed=if (%initType%==3 or "+
                                "%initType%==6 or "+
                                "%initType%==7) then true else false"}, true);



//--------- New design of Rotational -------------------------------------------
convertClass("Modelica.Mechanics.Rotational.Interfaces.Bearing",
             "ObsoleteModelica3.Mechanics.Rotational.Interfaces.Bearing");
convertClass("Modelica.Mechanics.Rotational.Interfaces.TwoFlangesAndBearing",
             "ObsoleteModelica3.Mechanics.Rotational.Interfaces.TwoFlangesAndBearing");
convertClass("Modelica.Mechanics.Rotational.Interfaces.TwoFlangesAndBearing",
             "ObsoleteModelica3.Mechanics.Rotational.Interfaces.TwoFlangesAndBearing");
convertClass("Modelica.Mechanics.Rotational.Sensors.AbsoluteSensor",
             "ObsoleteModelica3.Mechanics.Rotational.Sensors.AbsoluteSensor");
convertClass("Modelica.Mechanics.Rotational.Sensors.RelativeSensor",
             "ObsoleteModelica3.Mechanics.Rotational.Sensors.RelativeSensor");


convertClass("Modelica.Mechanics.Rotational.Interfaces.Rigid",
             "Modelica.Mechanics.Rotational.Interfaces.PartialRigid");
convertClass("Modelica.Mechanics.Rotational.Interfaces.Compliant",
             "Modelica.Mechanics.Rotational.Interfaces.PartialCompliant");
convertClass("Modelica.Mechanics.Rotational.Interfaces.Compliant",
             "Modelica.Mechanics.Rotational.Interfaces.PartialCompliant");
convertClass("Modelica.Mechanics.Rotational.Interfaces.TwoFlanges",
             "Modelica.Mechanics.Rotational.Interfaces.PartialTwoFlanges");
convertClass("Modelica.Mechanics.Rotational.Interfaces.FrictionBase",
             "Modelica.Mechanics.Rotational.Interfaces.PartialFriction");
convertClass("Modelica.Mechanics.Rotational.Interfaces.AbsoluteSensor",
             "Modelica.Mechanics.Rotational.Interfaces.PartialAbsoluteSensor");
convertClass("Modelica.Mechanics.Rotational.Interfaces.RelativeSensor",
             "Modelica.Mechanics.Rotational.Interfaces.PartialRelativeSensor");
convertClass("Modelica.Mechanics.Rotational.GearEfficiency",
             "ObsoleteModelica3.Mechanics.Rotational.GearEfficiency");
convertClass("Modelica.Mechanics.Rotational.Gear",
             "ObsoleteModelica3.Mechanics.Rotational.Gear");
convertClass("Modelica.Mechanics.Rotational.Gear2",
             "Modelica.Mechanics.Rotational.Gearbox");


// bearing -> support
convertElement({"Modelica.Mechanics.Rotational.IdealGear",
                "Modelica.Mechanics.Rotational.BearingFriction",
                "Modelica.Mechanics.Rotational.Brake",
                "Modelica.Mechanics.Rotational.LossyGear",
                "Modelica.Mechanics.Rotational.Gearbox",
                "Modelica.Mechanics.Rotational.Position",
                "Modelica.Mechanics.Rotational.Speed",
                "Modelica.Mechanics.Rotational.Accelerate",
                "Modelica.Mechanics.Rotational.Move",
                "Modelica.Mechanics.Rotational.Torque",
                "Modelica.Mechanics.Rotational.LinearSpeedDependentTorque",
                "Modelica.Mechanics.Rotational.QuadraticSpeedDependentTorque",
                "Modelica.Mechanics.Rotational.ConstantTorque",
                "Modelica.Mechanics.Rotational.ConstantSpeed",
                "Modelica.Mechanics.Rotational.TorqueStep"},
                "bearing", "support");

// bearingR -> supportR
convertElement({"Modelica.Mechanics.Rotational.IdealGearR2T"},
                "bearingR", "supportR");

// tau_support -> support.tau
convertElement({"Modelica.Mechanics.Rotational.IdealGear",
                "Modelica.Mechanics.Rotational.IdealGearR2T",
                "Modelica.Mechanics.Rotational.BearingFriction",
                "Modelica.Mechanics.Rotational.Brake",
                "Modelica.Mechanics.Rotational.LossyGear",
                "Modelica.Mechanics.Rotational.Gearbox",
                "Modelica.Mechanics.Rotational.Position",
                "Modelica.Mechanics.Rotational.Speed",
                "Modelica.Mechanics.Rotational.Accelerate",
                "Modelica.Mechanics.Rotational.Move",
                "Modelica.Mechanics.Rotational.Torque",
                "Modelica.Mechanics.Rotational.LinearSpeedDependentTorque",
                "Modelica.Mechanics.Rotational.QuadraticSpeedDependentTorque",
                "Modelica.Mechanics.Rotational.ConstantTorque",
                "Modelica.Mechanics.Rotational.ConstantSpeed",
                "Modelica.Mechanics.Rotational.TorqueStep"},
                "tau_support", "support.tau");

// flange_a -> flange
convertElement({"Modelica.Mechanics.Rotational.Sensors.AngleSensor",
                "Modelica.Mechanics.Rotational.Sensors.SpeedSensor",
                "MModelica.Mechanics.Rotational.Sensors.AccSensor"},
                "flange_a", "flange");

// flange_b -> flange
convertElement({"Modelica.Mechanics.Rotational.Fixed",
                "Modelica.Mechanics.Rotational.Position",
                "Modelica.Mechanics.Rotational.Speed",
                "Modelica.Mechanics.Rotational.Accelerate",
                "Modelica.Mechanics.Rotational.Move",
                "Modelica.Mechanics.Rotational.Torque"},
                "flange_b", "flange");



//-------- Machines ------------------------------------------------------------
// Convert Machines to 2.0.0 (MSL 3.0)
// Revisions :
// 2007/10/15: Anton Haumer
//             first version
// 2007/10/20: Anton Haumer
//             extended version

convertClass  ("Machines.Examples.Utilities", "Machines.Utilities");

convertClass  ("Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
               "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnet");
convertClass  ("Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
               "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcited");
convertClass  ("Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
               "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotor");

convertClass  ("Machines.Sensors.RotorAngle", "Machines.Sensors.RotorDisplacementAngle");
convertClass  ("Machines.Sensors.VoltageRMSsensor", "Machines.Sensors.VoltageQuasiRMSSensor");
convertClass  ("Machines.Sensors.CurrentRMSsensor", "Machines.Sensors.CurrentQuasiRMSSensor");

convertElement({"Machines.Examples.Utilities.SwitchYD"}, 
               "plug_NS", "plug_sn");
convertElement({"Machines.Examples.Utilities.SwitchYD"}, 
               "pug_PS", "plug_sp");
convertElement({"Machines.Examples.Utilities.SwitchYD"}, 
               "plug_P", "plugSupply");

convertElement({"Machines.Examples.Utilities.TerminalBox"}, 
               "StarDelta", "terminalConnection");

convertElement({"Machines.Examples.Utilities.TerminalBox"}, 
               "negativeMachinePlug", "plug_sn");
convertElement({"Machines.Examples.Utilities.TerminalBox"}, 
               "positiveMachinePlug", "plug_sp");
convertElement({"Machines.Examples.Utilities.TerminalBox"}, 
               "plugToGrid", "plugSupply");

convertElement({"Machines.Interfaces.PartialBasicInductionMachine",
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage",
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing",
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage",
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage"},
               "fNominal", "fsNominal");

convertElement({"Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing"}, 
               "VsNom", "VsNominal");
convertElement({"Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing"}, 
               "Vr_LR", "VrLockedRotor");
convertElement({"Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage"}, 
               "V0", "VsOpenCircuit");
convertElement({"Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage"}, 
               "VNominal", "VsNominal");
convertElement({"Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage"}, 
               "Ie0", "IeOpenCircuit");

convertElement({"Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage",  
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.Components.DamperCage"}, 
               "Lrsigma", "Lrsigmad");

convertElement({"Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.Components.DamperCage"}, 
               "Rr", "Rrd");

convertElement({"Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage"}, 
               "DamperCage", "useDamperCage");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited"}, 
               "J_Rotor", "Jr");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited"}, 
               "J_Stator", "Js");

convertElement({"Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing",
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited", 
                "Machines.BasicMachines.Components.ElectricalExcitation", 
                "Machines.BasicMachines.Components.PartialAirGapDC", 
                "Machines.BasicMachines.Components.AirGapDC", 
                "Machines.Interfaces.PartialBasicDCMachine"}, 
               "TurnsRatio", "turnsRatio");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited", 
                "Machines.BasicMachines.Components.PartialAirGap", 
                "Machines.BasicMachines.Components.AirGapS", 
                "Machines.BasicMachines.Components.AirGapR",
                "Machines.BasicMachines.Components.PartialAirGapDC", 
                "Machines.BasicMachines.Components.AirGapDC"}, 
               "flange_a", "shaft");

convertElement({"Machines.Sensors.RotorAngle"}, 
               "flange", "shaft");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited"}, 
               "phi_mechanical", "phiMechanical");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited"}, 
               "w_mechanical", "wMechanical");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited"}, 
               "rpm_mechanical", "rpmMechanical");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited",
                "Machines.BasicMachines.Components.PartialAirGap",
                "Machines.BasicMachines.Components.AirGapS",
                "Machines.BasicMachines.Components.AirGapR",
                "Machines.BasicMachines.Components.PartialAirGapDC",
                "Machines.BasicMachines.Components.AirGapDC"}, 
               "tau_electrical", "tauElectrical");

convertElement({"Machines.Interfaces.PartialBasicMachine", 
                "Machines.Interfaces.PartialBasicInductionMachine", 
                "Machines.Interfaces.PartialBasicDCMachine", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SquirrelCage", 
                "Machines.BasicMachines.AsynchronousInductionMachines.AIM_SlipRing", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnetDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ElectricalExcitedDamperCage", 
                "Machines.BasicMachines.SynchronousInductionMachines.SM_ReluctanceRotorDamperCage", 
                "Machines.BasicMachines.DCMachines.DC_PermanentMagnet", 
                "Machines.BasicMachines.DCMachines.DC_ElectricalExcited", 
                "Machines.BasicMachines.DCMachines.DC_SeriesExcited"}, 
               "tau_shaft", "tauShaft");

// Conversions for Machines.Examples

convertClass  ("Machines.Examples.AIMS_start", "Machines.Examples.AIMS_Start");
convertClass  ("Machines.Examples.SMEE_Gen", "Machines.Examples.SMEE_Generator");
convertClass  ("Machines.Examples.DCPM_start", "Machines.Examples.DCPM_Start");
convertClass  ("Machines.Examples.DCEE_start", "Machines.Examples.DCEE_Start");
convertClass  ("Machines.Examples.DCSE_start", "Machines.Examples.DCSE_Start");

convertElement({"Machines.Examples.AIMC_DOL",
                "Machines.Examples.AIMC_YD",
                "Machines.Examples.AIMS_Start",
                "Machines.Examples.AIMC_Inverter",
                "Machines.Examples.SMR_Inverter",
                "Machines.Examples.SMPM_Inverter",
                "Machines.Examples.DCPM_Start",
                "Machines.Examples.DCEE_Start",
                "Machines.Examples.DCSE_Start",
                "Machines.Examples.AIMC_Steinmetz"}, 
               "T_Load", "TLoad");

convertElement({"Machines.Examples.AIMC_DOL",
                "Machines.Examples.AIMC_YD",
                "Machines.Examples.AIMS_Start",
                "Machines.Examples.AIMC_Inverter",
                "Machines.Examples.SMR_Inverter",
                "Machines.Examples.SMPM_Inverter",
                "Machines.Examples.DCPM_Start",
                "Machines.Examples.DCEE_Start",
                "Machines.Examples.DCSE_Start",
                "Machines.Examples.AIMC_Steinmetz"}, 
               "J_Load", "JLoad");

// End Convert Machines to 2.0.0 (MSL 3.0)
//-------- Machines ------------------------------------------------------------
